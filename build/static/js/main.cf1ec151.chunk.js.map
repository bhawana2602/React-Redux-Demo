{"version":3,"sources":["reducers/userReducer.js","reducers/index.js","actions/actionTypes.js","store.js","actions/userActions.js","components/Table/Table.js","App.js","asyncActions/userAsyncActions.js","serviceWorker.js","index.js"],"names":["initialState","data","loading","error","appReducer","combineReducers","user","state","action","type","payload","createStore","applyMiddleware","thunk","getUserListSuccess","getUserListFailure","TH","styled","th","TD","td","Table","userObj","console","log","border","className","map","x","i","key","first_name","last_name","email","src","avatar","width","height","alt","Header","div","App","this","props","fetchUserList","total_pages","Array","from","keys","style","marginRight","page","value","onClick","marginTop","Component","mapDispatchToProps","dispatch","a","fetch","res","json","message","connect","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","store","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cf1ec151.chunk.js","sourcesContent":["import {\n  GET_USER_LIST,\n  GET_USER_LIST_SUCCESS,\n  GET_USER_LIST_FAILURE,\n} from \"../actions/actionTypes\";\n\n// define initial state of user\nconst initialState = {\n  data: null,\n  loading: false,\n  error: null,\n};\n\n// update store based on type and payload and return the state\nexport default function common(state = initialState, action) {\n  switch (action.type) {\n    case GET_USER_LIST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case GET_USER_LIST_SUCCESS:\n      const { data } = action.payload;\n      return {\n        ...state,\n        data,\n        loading: false,\n      };\n    case GET_USER_LIST_FAILURE:\n      const { error } = action.payload;\n      return {\n        ...state,\n        error,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport user from \"./userReducer\";\n\n// to combine all reducers together\nconst appReducer = combineReducers({\n  user,\n});\n\nexport default appReducer;\n","export const GET_USER_LIST = \"GET_USER_LIST\";\nexport const GET_USER_LIST_SUCCESS = \"GET_USER_LIST_SUCCESS\";\nexport const GET_USER_LIST_FAILURE = \"GET_USER_LIST_FAILURE\";\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport appReducer from './reducers';\n\nexport default createStore(appReducer, applyMiddleware(thunk));","import {\n  GET_USER_LIST,\n  GET_USER_LIST_SUCCESS,\n  GET_USER_LIST_FAILURE,\n} from \"./actionTypes\";\n\n// to get the list of users - started\nexport const getUserList = () => {\n  return {\n    type: GET_USER_LIST,\n  };\n};\n\n// to get the list of users - success\nexport const getUserListSuccess = (data) => {\n  return {\n    type: GET_USER_LIST_SUCCESS,\n    payload: {\n      data,\n    },\n  };\n};\n\n// to get the list of users - failure\nexport const getUserListFailure = (error) => {\n  return {\n    type: GET_USER_LIST_FAILURE,\n    payload: {\n      error,\n    },\n  };\n};\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TH = styled.th`\r\n  padding: 10px;\r\n  background: #269faf66;\r\n`;\r\nconst TD = styled.td`\r\n  padding: 8px;\r\n`;\r\n\r\nconst Table = ({ userObj }) => {\r\n  console.log(userObj, \"functional component\");\r\n  return (\r\n    <table border=\"1\" className=\"table\">\r\n      <thead>\r\n        <TH>First Name</TH>\r\n        <TH>Last Name</TH>\r\n        <TH>Email</TH>\r\n        <TH>Profile</TH>\r\n      </thead>\r\n      <tbody>\r\n        {userObj.data &&\r\n          userObj.data.data.map((x, i) => (\r\n            <tr key={i}>\r\n              <TD>{x.first_name}</TD>\r\n              <TD>{x.last_name}</TD>\r\n              <TD>{x.email}</TD>\r\n              <TD>\r\n                <img src={x.avatar} width=\"40\" height=\"40\" alt=\"profile\" />\r\n              </TD>\r\n            </tr>\r\n          ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchUserList } from \"./asyncActions/userAsyncActions\";\nimport styled from \"styled-components\";\nimport Table from \"./components/Table/Table\";\nimport \"./App.css\";\n\nconst Header = styled.div`\n  padding: 20px;\n  text-align: center;\n  background: #269faf;\n  color: white;\n  font-size: 18px;\n  font-wight: 500;\n`;\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchUserList();\n  }\n  render() {\n    const { userObj } = this.props;\n    return (\n      <div>\n        <Header>React Redux Demo</Header>\n        <Table userObj={userObj} />\n\n        {userObj.data &&\n          userObj.data.total_pages &&\n          Array.from(Array(userObj.data.total_pages).keys())\n            .map((x) => x + 1)\n            .map((x) => (\n              <input\n                key={x}\n                type=\"button\"\n                style={{ marginRight: 5 }}\n                className={`btn${x === userObj.data.page ? \" active\" : \"\"}`}\n                value={x}\n                onClick={() => this.props.fetchUserList(x)}\n              />\n            ))}\n        <br />\n        {userObj.loading && (\n          <div style={{ marginTop: 10 }}>Fetching user details...</div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    userObj: state.user,\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchUserList,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  getUserList,\n  getUserListSuccess,\n  getUserListFailure,\n} from \"../actions/userActions\";\n\n// get user list\nexport const fetchUserList = (page = 1) => async (dispatch) => {\n  dispatch(getUserList());\n  try {\n    const res = await fetch(`https://reqres.in/api/users?page=${page}`);\n    const data = await res.json();\n    dispatch(getUserListSuccess(data));\n  } catch (err) {\n    dispatch(getUserListFailure(err.message));\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nserviceWorker.register();\n"],"sourceRoot":""}